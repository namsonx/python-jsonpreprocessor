**************************************************************************************************************

Checklist for implementation of self test cases for JsonPreprocessor

XC-CT/ECA3-Queckenstedt

18.07.2023

--------------------------------------------------------------------------------------------------------------

* Dataset to be used for testing

// variant info
"variant_1"            : "VARIANT-1",
"variant_2"            : "VARIANT-2",
"list_variant_numbers" : [1, 2],
"list_variant_index"   : 0,
"variant_number"       : "1",
"dict_variants"        : {"variant_1" : "VARIANT-1", "variant_2" : "VARIANT-2"},
"variant_key_1"        : "variant_1",
//
"INNERMOST_VARIANT_VALUE" : "RIA",
"ARIAN"                   : "ARIAN",
"VARIANT"                 : "VARIANT",
//
// milestone info
"milestone_1"            : "MILESTONE-1",
"milestone_2"            : "MILESTONE-2",
"milestone_3"            : "MILESTONE-3",
"list_milestone_numbers" : [1, 2, 3],
"list_milestone_index"   : 1,
"milestone_number"       : "2",
"dict_milestones"        : {"milestone_1" : "MILESTONE-1", "milestone_2" : "MILESTONE-2", "milestone_3" : "MILESTONE-3"},
"milestone_key_2"        : "milestone_2",
//
"innermost_milestone_name" : "est",
"ilesto"                   : "ilesto",
"milestone"                : "milestone"

--------------------------------------------------------------------------------------------------------------

* ========== GOODCASE test cases

// nested parameter / string parameter substitution in parameter value
"variant_1" : "${V${A${INNERMOST_VARIANT_VALUE}N}T}-${variant_number} (new value)"

// nested parameter / string parameter substitution in parameter name
"${m${il${innermost_milestone_name}o}ne}_${milestone_number}" : "MILESTONE-2 (new value)"

// nested parameter / index parameter substitution in parameter name / standard notation
"VAR-${variant_${list_variant_numbers}[${list_variant_index}]}_MS-${milestone_${list_milestone_numbers}[${list_milestone_index}]}_param" : "value"

// nested parameter / index parameter substitution in parameter name / dotdict notation
"VAR-${variant_${list_variant_numbers.${list_variant_index}}}_MS-${milestone_${list_milestone_numbers.${list_milestone_index}}}_param" : "value"

// nested parameter / index parameter substitution in parameter value / standard notation
"param" : "VAR-${variant_${list_variant_numbers}[${list_variant_index}]}_MS-${milestone_${list_milestone_numbers}[${list_milestone_index}]} value"

// nested parameter / index parameter substitution in parameter value / dotdict notation
"param" : "VAR-${variant_${list_variant_numbers.${list_variant_index}}}_MS-${milestone_${list_milestone_numbers.${list_milestone_index}}} value"

// nested parameter / key parameter substitution in parameter name / standard notation
"VAR-${dict_variants}['${variant_key_${variant_number}}']_MS-${dict_milestones}['${milestone_key_${milestone_number}}']_param" : "value"

// nested parameter / key parameter substitution in parameter name / dotdict notation
"VAR-${dict_variants.${variant_key_${variant_number}}}_MS-${dict_milestones.${milestone_key_${milestone_number}}}_param" : "value"

// nested parameter / key parameter substitution in parameter value / standard notation
"param" : "VAR-${dict_variants}['${variant_key_${variant_number}}']_MS-${dict_milestones}['${milestone_key_${milestone_number}}'] value"

// nested parameter / key parameter substitution in parameter value / dotdict notation
"param" : "VAR-${dict_variants.${variant_key_${variant_number}}}_MS-${dict_milestones.${milestone_key_${milestone_number}}} value"

--------------------------------------------------------------------------------------------------------------

* ========== BADCASE test cases (${IAMNOTEXISTING})

// nested parameter / string parameter substitution in parameter value / innermost parameter not existing
"variant_1" : "${V${A${IAMNOTEXISTING}N}T}-${variant_number} (new value)"

// nested parameter / string parameter substitution in parameter name / in between parameter not existing
"${m${IAMNOTEXISTING}ne}_${milestone_number}" : "MILESTONE-2 (new value)"

// nested parameter / index parameter substitution in parameter name / standard notation / index parameter not existing
"VAR-${variant_${list_variant_numbers}[${IAMNOTEXISTING}]}_MS-${milestone_${list_milestone_numbers}[${list_milestone_index}]}_param" : "value"

// nested parameter / index parameter substitution in parameter name / dotdict notation / index parameter not existing
"VAR-${variant_${list_variant_numbers.${list_variant_index}}}_MS-${milestone_${list_milestone_numbers.${IAMNOTEXISTING}}}_param" : "value"

// nested parameter / index parameter substitution in parameter value / standard notation / index parameter not existing
"param" : "VAR-${variant_${list_variant_numbers}[${IAMNOTEXISTING}]}_MS-${milestone_${list_milestone_numbers}[${list_milestone_index}]} value"

// nested parameter / index parameter substitution in parameter value / dotdict notation / index parameter not existing
"param" : "VAR-${variant_${list_variant_numbers.${list_variant_index}}}_MS-${milestone_${list_milestone_numbers.${IAMNOTEXISTING}}} value"

// nested parameter / key parameter substitution in parameter name / standard notation / variant number not existing
"VAR-${dict_variants}['${variant_key_${IAMNOTEXISTING}}']_MS-${dict_milestones}['${milestone_key_${milestone_number}}']_param" : "value"

// nested parameter / key parameter substitution in parameter name / dotdict notation / milestone number not existing
"VAR-${dict_variants.${variant_key_${variant_number}}}_MS-${dict_milestones.${milestone_key_${IAMNOTEXISTING}}}_param" : "value"

// nested parameter / key parameter substitution in parameter value / standard notation / variant number not existing
"param" : "VAR-${dict_variants}['${variant_key_${IAMNOTEXISTING}}']_MS-${dict_milestones}['${milestone_key_${milestone_number}}'] value"

// nested parameter / key parameter substitution in parameter value / dotdict notation / milestone number not existing
"param" : "VAR-${dict_variants.${variant_key_${variant_number}}}_MS-${dict_milestones.${milestone_key_${IAMNOTEXISTING}}} value"

--------------------------------------------------------------------------------------------------------------

* nested composite data structure used for testing

"params" : [{"dict_1_key_1" : "dict_1_key_1 value",
             "dict_1_key_2" : ["dict_1_key_2 value 1", "dict_1_key_2 value 2"]},
             //
             {"dict_2_key_1" : "dict_2_key_1 value",
              "dict_2_key_2" : {"dict_2_A_key_1" : "dict_2_A_key_1 value",
                                "dict_2_A_key_2" : ["dict_2_A_key_2 list value 1",
                                                    "dict_2_A_key_2 list value 2",
                                                    {"dict_2_A_key_2_subkey_1" : "dict_2_A_key_2_subkey_1 value",
                                                     "dict_2_A_key_2_subkey_2" : ["value_1", "value_2"]}]}}]

// examples

// access to single elements of composite data structure

// a) standard notation
"dict_1_key_1_value_standard" : ${params}[0]['dict_1_key_1'],
// b) dotdict notation
"dict_1_key_1_value_dotdict" : ${params.0.dict_1_key_1},

// c) standard notation
"dict_2_A_key_2_subkey_2_value_1_standard" : ${params}[1]['dict_2_key_2']['dict_2_A_key_2'][2]['dict_2_A_key_2_subkey_2'][0]
// d) dotdict notation
"dict_2_A_key_2_subkey_2_value_1_dotdict" : ${params.1.dict_2_key_2.dict_2_A_key_2.2.dict_2_A_key_2_subkey_2.0}

--------------------------------------------------------------------------------------------------------------

* the same data structure, but with partially dots inside key names

"params" : [{"dict_1_key_1" : "dict_1_key_1 value",
             "dict_1_key_2" : ["dict_1_key_2 value 1", "dict_1_key_2 value 2"]},
             //
             {"dict_2_key_1" : "dict_2_key_1 value",
              "dict_2_key_2" : {"dict.2.A.key.1" : "dict_2_A_key_1 value",
                                "dict.2.A.key.2" : ["dict_2_A_key_2 list value 1",
                                                    "dict_2_A_key_2 list value 2",
                                                    {"dict_2_A_key_2_subkey_1" : "dict_2_A_key_2_subkey_1 value",
                                                     "dict_2_A_key_2_subkey_2" : ["value_1", "value_2"]}]}}]

// "dict_2_A_key_1" renamed to "dict.2.A.key.1"
// "dict_2_A_key_2" renamed to "dict.2.A.key.2"

// a) standard notation
// key names with dots inside require standard syntax (['dict.2.A.key.2'])
"value_1_standard" : "${params}[1]['dict_2_key_2']['dict.2.A.key.2'][2]['dict_2_A_key_2_subkey_2'][0]"

// b) dotdict notation (in this case deprecated!)
// "value_1_dotdict" : "${params.1.dict_2_key_2.dict.2.A.key.2.2.dict_2_A_key_2_subkey_2.0}"
// it's obvious: this is partially ambiguous and also not human readable any more

// we urgently recommend not to mix up standard notation and dotdict notation within the same line of code

--------------------------------------------------------------------------------------------------------------

* value identification (quotes required around expression or not?)

// an expression can be:
// * a value of a parameter
// * a value of a dictionary key
// * a list element
// * a parameter name
// * a name of a dictionary key

// possible errors (sorted by priority of detection):
// 1. syntax violations                   > error message: syntax violation ...
// 2. missing quotes around expressions   > error message: missing quote around expression '...' (previously: "value not found")
// 3. parameter not available             > error message: parameter '...' not available

// syntax violations should have highest priority (error handling, error messages)
// in case of syntax violations further errors like missing quotes or missing parameters are not relevant

// errors should be detected in the order listed above

// opening element: '${'
// closing element: '}' ('}[]' also!)

// * rule 1
// parameter of type 'list'
// valid dollar operator expressions identified, but with index (in square brackets) defined within the curly brackets
// => syntax error (index expected to be set outside the curly brackets)
OK: ${list_param}[0]
OK: "${list_param}[0]"
OK: "value_${list_param}[0]"
ERR: ${list_param[0]}
ERR: "${list_param[0]}"
ERR: "value_${list_param[0]}"

// * rule 2
// expression contains opening elements '${' (n>0) and no, one or more than one closing element '}' (n>=0),
// more opening elements are counted than closing elements
// => corresponding closing elements are missing
// => quotes and missing parameters are irrelevant in this case
// => syntax error
ERR: ${param
ERR: "${param"
ERR: ${p${ara}m
ERR: "${p${ara}m"
ERR: ABC${p${ara}m
ERR: "ABC${p${ara}m"
ERR: ABC${p${aram}
ERR: "ABC${p${aram}"

// * rule 3
// expression contains no, one or more than one opening element '${' (n>=0) and closing elements '}' (n>0),
// more closing elements are counted than opening elements
// => with no opening element '${' quotes around expression are required
OK: "{par}am}"
ERR: {par}am}
// => with opening element '${' identifies parameter '${par}' (non greedy search for '}')
// => detects extra content 'am}' or 'am}[1]' outside any '${}'
// => identifies composite string
// => quotes required
OK: "${par}am}"
ERR: ${par}am}
OK: "${par}[0]am}"
ERR: ${par}[0]am}
OK: "${par.0}am}"
ERR: ${par.0}am}
OK: "${par}[0]am}[1]"
ERR: ${par}[0]am}[1]
OK: "${par.0}am.1}"
ERR: ${par.0}am.1}

// * rule 4
// expression starts with '${' and ends with '}', no further matching '${' and '}' in between
// => no quotes around expression required, but allowed (string conversion)
OK: ${param}
OK: "${param}"
OK: ${param}[0]
OK: "${param}[0]"
OK: ${param.0}
OK: "${param.0}"

// * rule 5
// expression starts with '${' and ends with '}', further matching '${' and '}' in between (nested)
// => no quotes around expression required, but allowed (string conversion)
OK: ${p${ara}m}
OK: "${p${ara}m}"
OK: ${p${ara}[0]m}[1]
OK: "${p${ara}[0]m}[1]"
OK: ${p${ara.0}m.1}
OK: "${p${ara.0}m.1}"

// * rule 6
// expression starts with '${' and ends with '}', further matching '${' and '}' in between (not all nested)
// => identifies composite string
// => quotes around expression required
OK: "${param1}${p${ara}m2}"
ERR: ${param1}${p${ara}m2}
OK: "${param1}[0]${p${ara}[1]m2}[2]"
ERR: ${param1}[0]${p${ara}[1]m2}[2]
OK: "${param1.0}${p${ara.1}m2.2}"
ERR: ${param1.0}${p${ara.1}m2.2}
OK:  "ABC, ${param1}, ${param2}, XYZ"
ERR: ABC, ${param1}, ${param2}, XYZ
OK:  "${param1}, ABC ; XYZ / ${param2}"
ERR: ${param1}, ABC ; XYZ / ${param2}

--------------------------------------------------------------------------------------------------------------
Further test cases (TODO)
--------------------------------------------------------------------------------------------------------------

NESTED_IMPORTS
- incl. file not existing
- incl cyclic import
--------------------------------------------------------------------------------------------------------------

New feature: IMPLICIT_SUBKEYS

Mixture of explicite and implicite creation

"AA" : {},
${AA}["BB"] : {},
${AA.BB.CC.DD} : 25

--------------------------------------------------------------------------------------------------------------
SPECIAL_CHARACTERS
--------------------------------------------------------------------------------------------------------------

